{"lines": {"blank": 66, "comment": 9, "docstring": 288, "code": 169}, "pep8": {"count": 31, "categories": [["1", "E129", "visually indented line with same indent as next logical line"], ["3", "E231", "missing whitespace after ','"], ["9", "E303", "too many blank lines (3)"], ["15", "E501", "line too long (114 > 79 characters)"], ["2", "W291", "trailing whitespace"], ["1", "W391", "blank line at end of file"]]}, "doc": {"statistics": {"grand_tools/astro.py": {"tokens": {"AstroConversion.__init__": [36, ["Undocumented parameter `altitude`", "Undocumented parameter `latitude`", "Missing description", "Undocumented parameter `longitude`", "Undocumented parameter `ra`", "Undocumented parameter `dec`"]]}, "n_errors": 6, "n_tokens": 16}, "grand_tools/coordinates/representation.py": {"tokens": {}, "n_errors": 0, "n_tokens": 24}, "grand_tools/coordinates/frame.py": {"tokens": {}, "n_errors": 0, "n_tokens": 21}}, "doc": "Common tools for GRAND packages", "classes": {}, "definitions": {}, "functions": {}, "imports": {"1": {"": [["astro", "astro"]]}}, "path": "grand_tools/__init__.py", "modules": {"astro": {"doc": "Common tools for GRAND packages", "classes": {"AstroConversion": [27, "This class handles astronomical conversion, such as coordinate transformation from alt-az on local site to sky\ncoordinates.\n\nTodo\n----\n- [ ] Convert from print to logger (grand-mother/tools#1) ", {"attributes": {}, "methods": {"__init__": [36, "", {"parameters": {"longitude": null, "latitude": null, "altitude": null, "ra": null, "dec": null}, "prototype": "cls, longitude=None, latitude=None, altitude=None, ra=None, dec=None"}], "to_skycoord": [51, "Transforms an input direction given in a local site from alt-az system (theta, phi) to\n`~astropy.coordinates.SkyCoord` sky coordinates.\n\nGRAND convention: receiver convention: phi is oriented West of North, theta from zenith\n\n```\n      z=Up\n      /\\\n      |\n      |\n      | theta\n      |- /.\n      | / .\n      |/  .\n      --------------> y=West\n     / .  .\n    / / . .\n   /-     .\n  /   phi\n |/\nx=North\n```\n", {"parameters": {"theta": ["array, scalar, Quantity, Angle", "Local azimuth of the event"], "phi": ["array, scalar, Quantity, Angle", "Local altitude of the event"], "time": ["sequence, ndarray, number, str, bytes, or Time object", "Time to use to compute the AltAz coordinates, instance of `~astropy.time.Time`"], "coordsys": ["class or frame object or SkyCoord object", "Coordinate system to use, can be an instance of `~astropy.coordinates` such as ICRS,"]}, "prototype": "cls, theta=None, phi=None, time=None, coordsys=ICRS", "returns": [["ICRS", "Sky coordinates in 'ICRS'", ""]]}], "localsiderealtime": [101, "Provide the local sidereal time\n", {"parameters": {"time": ["sequence, ndarray, number, str, bytes, or Time object", "Input time, in whatever time scale supported by `~astropy.time.Time`"]}, "prototype": "cls, time", "returns": [["Longitude", "Local sidereal time", ""]]}]}, "bases": []}]}, "definitions": {}, "functions": {}, "imports": {}, "path": "grand_tools/astro.py"}, "coordinates": {"doc": "GRAND extension of astropy.coordinates", "classes": {"ENU": [40, "Local geographic frames on the Earth, oriented along cardinal directions\n    ", {"attributes": {"default_representation": [44, "Default representation of local frames", null], "location": [47, "The origin on Earth of the local frame", null], "orientation": [50, "The orientation of the local frame, as cardinal directions", null], "obstime": [53, "The observation time", null]}, "methods": {"__init__": [57, "Initialisation of a local frame\n", {"parameters": {"location": ["EarthLocation", "The location on Earth of the local frame origin"], "orientation": ["sequence of str, optional", "The cardinal directions of the x, y, and z axis (default: E, N, U)"], "*args": ["", "Any representation of the frame data, e.g. x, y, and z coordinates"], "**kwargs": ["", "Any extra BaseCoordinateFrame arguments"]}, "prototype": "self, *args, location=None, orientation=None, **kwargs", "raises": [["ValueError", "The local frame orientation is not valid"]]}]}, "bases": ["BaseCoordinateFrame"]}, "grand_tools/coordinates/frame.py"], "GeodeticRepresentation": [32, "Geodetic coordinates representation w.r.t. the WGS84 ellipsoid", {"attributes": {"attr_classes": [35, "Attributes of a Geodetic representation", null]}, "methods": {"__init__": [41, "Initialise a geodetic representation\n", {"parameters": {"latitude": ["Quantity or str", "The latitude angle measured clockwise, w.r.t. the xOy plane"], "longitude": ["Quantity or str", "The longitude angle measured counter-clockwise, w.r.t. the x-axis"], "height": ["Quantity or str", "The height above the WGS84 ellipsoid"], "copy": ["bool, optional", "If `True` (default), arrays will be copied rather than referenced"]}, "prototype": "self, latitude, longitude, height, copy=True"}], "from_cartesian": [59, "Generate a Geodetic representation from a Cartesian one\n", {"parameters": {"cart": ["CartesianRepresentation", "The cartesian coordinates of a point, e.g. in ITRS"]}, "prototype": "cls, cart", "returns": [["GeodeticRepresentation", "The corresponding geodetic coordinates", ""]]}], "to_cartesian": [85, "Generate a Cartesian representation from a Geodetic one\n", {"parameters": {}, "prototype": "self", "returns": [["CartesianRepresentation", "The Cartesian coordinates corresponding to this representation", ""]]}]}, "bases": ["BaseRepresentation"]}, "grand_tools/coordinates/representation.py"], "HorizontalRepresentation": [104, "Horizontal angular representation, for unit vectors", {"attributes": {"attr_classes": [108, "Attributes of a Horizontal representation", null]}, "methods": {"__init__": [113, "Initialise a Horizontal angular representation of a unit vector\n", {"parameters": {"azimuth": ["Quantity or str", "The azimuth angle measured clockwise, w.r.t. the y axis"], "elevation": ["Quantity or str", "The elevation angle measured clockwise, w.r.t. the xOy plane"], "copy": ["bool, optional", "If `True` (default), arrays will be copied rather than referenced"]}, "prototype": "self, azimuth, elevation, copy=True"}], "from_cartesian": [129, "Generate a Horizontal angular representation from a Cartesian unit\nvector\n\n**Note** that the Cartesian unit vector **must** be dimensioneless.\nThough it is not checked if the norm of the vector is indeed unity.\n", {"parameters": {"cart": ["CartesianRepresentation", "The cartesian coordinates of the unit vector"]}, "prototype": "cls, cart", "returns": [["HorizontalRepresentation", "The corresponding angular coordinates", ""]], "raises": [["ValueError", "The cartesian representation is not dimensioneless"]]}], "to_cartesian": [169, "Generate a Cartesian unit vector from this Horizontal angular\nrepresentation\n", {"parameters": {}, "prototype": "self", "returns": [["CartesianRepresentation", "The corresponding cartesian unit vector", ""]]}]}, "bases": ["BaseRepresentation"]}, "grand_tools/coordinates/representation.py"]}, "definitions": {}, "functions": {}, "imports": {"1": {"frame": [["ENU", "ENU"]], "representation": [["GeodeticRepresentation", "GeodeticRepresentation"], ["HorizontalRepresentation", "HorizontalRepresentation"]]}}, "path": "grand_tools/coordinates/__init__.py", "__all__": ["ENU", "GeodeticRepresentation", "HorizontalRepresentation"], "modules": {"representation": {"doc": "Extra representations for astropy.coordinates", "classes": {"GeodeticRepresentation": [32, "Geodetic coordinates representation w.r.t. the WGS84 ellipsoid", {"attributes": {"attr_classes": [35, "Attributes of a Geodetic representation", null]}, "methods": {"__init__": [41, "Initialise a geodetic representation\n", {"parameters": {"latitude": ["Quantity or str", "The latitude angle measured clockwise, w.r.t. the xOy plane"], "longitude": ["Quantity or str", "The longitude angle measured counter-clockwise, w.r.t. the x-axis"], "height": ["Quantity or str", "The height above the WGS84 ellipsoid"], "copy": ["bool, optional", "If `True` (default), arrays will be copied rather than referenced"]}, "prototype": "self, latitude, longitude, height, copy=True"}], "from_cartesian": [59, "Generate a Geodetic representation from a Cartesian one\n", {"parameters": {"cart": ["CartesianRepresentation", "The cartesian coordinates of a point, e.g. in ITRS"]}, "prototype": "cls, cart", "returns": [["GeodeticRepresentation", "The corresponding geodetic coordinates", ""]]}], "to_cartesian": [85, "Generate a Cartesian representation from a Geodetic one\n", {"parameters": {}, "prototype": "self", "returns": [["CartesianRepresentation", "The Cartesian coordinates corresponding to this representation", ""]]}]}, "bases": ["BaseRepresentation"]}], "HorizontalRepresentation": [104, "Horizontal angular representation, for unit vectors", {"attributes": {"attr_classes": [108, "Attributes of a Horizontal representation", null]}, "methods": {"__init__": [113, "Initialise a Horizontal angular representation of a unit vector\n", {"parameters": {"azimuth": ["Quantity or str", "The azimuth angle measured clockwise, w.r.t. the y axis"], "elevation": ["Quantity or str", "The elevation angle measured clockwise, w.r.t. the xOy plane"], "copy": ["bool, optional", "If `True` (default), arrays will be copied rather than referenced"]}, "prototype": "self, azimuth, elevation, copy=True"}], "from_cartesian": [129, "Generate a Horizontal angular representation from a Cartesian unit\nvector\n\n**Note** that the Cartesian unit vector **must** be dimensioneless.\nThough it is not checked if the norm of the vector is indeed unity.\n", {"parameters": {"cart": ["CartesianRepresentation", "The cartesian coordinates of the unit vector"]}, "prototype": "cls, cart", "returns": [["HorizontalRepresentation", "The corresponding angular coordinates", ""]], "raises": [["ValueError", "The cartesian representation is not dimensioneless"]]}], "to_cartesian": [169, "Generate a Cartesian unit vector from this Horizontal angular\nrepresentation\n", {"parameters": {}, "prototype": "self", "returns": [["CartesianRepresentation", "The corresponding cartesian unit vector", ""]]}]}, "bases": ["BaseRepresentation"]}]}, "definitions": {}, "functions": {}, "imports": {}, "path": "grand_tools/coordinates/representation.py", "__all__": ["GeodeticRepresentation", "HorizontalRepresentation"]}, "frame": {"doc": "Extra frame(s) for astropy.coordinates", "classes": {"ENU": [40, "Local geographic frames on the Earth, oriented along cardinal directions\n    ", {"attributes": {"default_representation": [44, "Default representation of local frames", null], "location": [47, "The origin on Earth of the local frame", null], "orientation": [50, "The orientation of the local frame, as cardinal directions", null], "obstime": [53, "The observation time", null]}, "methods": {"__init__": [57, "Initialisation of a local frame\n", {"parameters": {"location": ["EarthLocation", "The location on Earth of the local frame origin"], "orientation": ["sequence of str, optional", "The cardinal directions of the x, y, and z axis (default: E, N, U)"], "*args": ["", "Any representation of the frame data, e.g. x, y, and z coordinates"], "**kwargs": ["", "Any extra BaseCoordinateFrame arguments"]}, "prototype": "self, *args, location=None, orientation=None, **kwargs", "raises": [["ValueError", "The local frame orientation is not valid"]]}]}, "bases": ["BaseCoordinateFrame"]}]}, "definitions": {}, "functions": {"itrs_to_enu": [114, "Compute the transformation from ITRS to ENU coordinates\n", {"parameters": {"itrs": ["ITRS", "The initial coordinates in ITRS"], "enu": ["ENU", "The ENU frame to transform to"]}, "prototype": "itrs, enu", "returns": [["ENU", "The ENU frame with transformed coordinates", ""]]}], "enu_to_itrs": [140, "Compute the transformation from ENU to ITRS coordinates\n", {"parameters": {"enu": ["ENU", "The initial coordinates in ENU"], "itrs": ["ITRS", "The ITRS frame to transform to"]}, "prototype": "enu, itrs", "returns": [["ITRS", "The ITRS frame with transformed coordinates", ""]]}]}, "imports": {}, "path": "grand_tools/coordinates/frame.py", "__all__": ["ENU"]}}}}}, "package": {"description": "Common tools for GRAND packages", "name": "grand_tools", "git-name": "tools", "dist-name": "grand-tools"}, "manager": {"version": "0.1.3", "git": {"sha1": "2c25f82028fe5e9608547cc16169098aa311e49d", "author": "Valentin Niess", "date": "2019-04-02 13:43:36 +0200", "count": 47}}}
