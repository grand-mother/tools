{"lines": {"blank": 9, "comment": 5, "docstring": 79, "code": 35}, "pep8": {"count": 10, "categories": [["10", "E501", "line too long (88 > 79 characters)"]]}, "doc": {"statistics": {"tools/astro.py": {"tokens": {"AstroConversion.__init__": [36, ["Undocumented parameter `ra`", "Missing description", "Undocumented parameter `latitude`", "Undocumented parameter `dec`", "Undocumented parameter `cls`", "Undocumented parameter `altitude`", "Undocumented parameter `longitude`"]], "AstroConversion.to_skycoord": [51, ["Undocumented parameter `time`", "Undocumented parameter `theta`", "Undocumented parameter `coordsys`", "Undocumented parameter `phi`", "Undocumented parameter `cls`"]], "AstroConversion.localsiderealtime": [89, ["Undocumented parameter `time`", "Undocumented parameter `cls`"]]}, "n_errors": 14, "n_tokens": 17}}, "doc": "Generic tools (topographic transformations, data encapsulation, astronomical conversion)", "classes": {}, "definitions": {}, "functions": {}, "imports": {"1": {"": [["astro", "astro"]]}}, "path": "tools/__init__.py", "modules": {"astro": {"doc": "Common framework for GRAND packages", "classes": {"AstroConversion": [27, "AstroConversion\n\nThis class handles astronomical conversion, such as coordinate transformation from alt-az on local site to sky\ncoordinates.\n\n@todo Convert from print to logger", {"attributes": {}, "methods": {"__init__": [36, "", {"parameters": {"cls": null, "longitude": null, "latitude": null, "altitude": null, "ra": null, "dec": null}, "prototype": "cls, longitude=None, latitude=None, altitude=None, ra=None, dec=None"}], "to_skycoord": [51, " Transforms an input direction given in a local site from alt-az system (theta, phi) to\n `~astropy.coordinates.SkyCoord` sky coordinates.\n\n GRAND convention: receiver convention: phi is oriented West of North, theta from zenith\n\n      z=Up\n      /             |\n      |\n      | theta\n      |- /.\n      | / .\n      |/  .\n      --------------> y=West\n     / .  .\n    / / . .\n   /-     .\n  /   phi\n |/\nx=North\n\n :param theta: local azimuth of the event\n :param phi: local altitude of the event\n :param time: time to use to compute the AltAz coordinates, instance of `~astropy.time.Time`\n :param coordsys: coordinate system to use, can be an instance of `~astropy.coordinates` such as ICRS,\n                  FK5, etc...\n :return: sky coordinates in 'ICRS'\n ", {"parameters": {"cls": null, "theta": null, "phi": null, "time": null, "coordsys": null}, "prototype": "cls, theta=None, phi=None, time=None, coordsys=ICRS"}], "localsiderealtime": [89, "Provide the local sidereal time\n@todo Implement computation of local sidereal time\n:param time: input time, in whatever time scale supported by `~astropy.time.Time`\n:return: local sidereal time", {"parameters": {"cls": null, "time": null}, "prototype": "cls, time"}]}, "bases": []}]}, "definitions": {}, "functions": {}, "imports": {}, "path": "tools/astro.py"}}}}