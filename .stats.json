{"lines": {"blank": 9, "comment": 5, "docstring": 103, "code": 35}, "pep8": {"count": 11, "categories": [["10", "E501", "line too long (88 > 79 characters)"], ["1", "W291", "trailing whitespace"]]}, "doc": {"statistics": {"tools/astro.py": {"tokens": {"AstroConversion.__init__": [36, ["Missing description", "Undocumented parameter `latitude`", "Undocumented parameter `longitude`", "Undocumented parameter `ra`", "Undocumented parameter `altitude`", "Undocumented parameter `dec`"]]}, "n_errors": 6, "n_tokens": 16}}, "doc": "Generic tools (topographic transformations, data encapsulation, astronomical conversion)", "classes": {}, "definitions": {}, "functions": {}, "imports": {"1": {"": [["astro", "astro"]]}}, "path": "tools/__init__.py", "modules": {"astro": {"doc": "Common framework for GRAND packages", "classes": {"AstroConversion": [27, "This class handles astronomical conversion, such as coordinate transformation from alt-az on local site to sky\ncoordinates.\n\nTodo\n----\n- [ ] Convert from print to logger (grand-mother/tools#1) ", {"attributes": {}, "methods": {"__init__": [36, "", {"parameters": {"longitude": null, "latitude": null, "altitude": null, "ra": null, "dec": null}, "prototype": "cls, longitude=None, latitude=None, altitude=None, ra=None, dec=None"}], "to_skycoord": [51, "Transforms an input direction given in a local site from alt-az system (theta, phi) to\n`~astropy.coordinates.SkyCoord` sky coordinates.\n\nGRAND convention: receiver convention: phi is oriented West of North, theta from zenith\n\n```\n      z=Up\n      /\\\n      |\n      |\n      | theta\n      |- /.\n      | / .\n      |/  .\n      --------------> y=West\n     / .  .\n    / / . .\n   /-     .\n  /   phi\n |/\nx=North\n```\n", {"parameters": {"theta": ["array, scalar, Quantity, Angle", "Local azimuth of the event"], "phi": ["array, scalar, Quantity, Angle", "Local altitude of the event"], "time": ["sequence, ndarray, number, str, bytes, or Time object", "Time to use to compute the AltAz coordinates, instance of `~astropy.time.Time`"], "coordsys": ["class or frame object or SkyCoord object", "Coordinate system to use, can be an instance of `~astropy.coordinates` such as ICRS,"]}, "prototype": "cls, theta=None, phi=None, time=None, coordsys=ICRS", "returns": [["ICRS", "Sky coordinates in 'ICRS'", ""]]}], "localsiderealtime": [101, "Provide the local sidereal time\n\nTodo\n----\n- [ ] Implement computation of local sidereal time\n      (grand-mother/tools#2)\n", {"parameters": {"time": ["sequence, ndarray, number, str, bytes, or Time object", "Input time, in whatever time scale supported by `~astropy.time.Time`"]}, "prototype": "cls, time", "returns": [["Longitude", "Local sidereal time", ""]]}]}, "bases": []}]}, "definitions": {}, "functions": {}, "imports": {}, "path": "tools/astro.py"}}}}